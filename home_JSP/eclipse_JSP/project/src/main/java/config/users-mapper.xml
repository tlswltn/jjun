<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.UsersMapper">

	<!-- 사용자 데이터 매핑 -->
	<resultMap id="users" type="dto.UsersDTO">
		<id column="user_number" property="userNumber" />
		<result column="login_id" property="loginId" />
		<result column="nick_name" property="nickName" />
		<result column="password" property="password" />
		<result column="create_time" property="createTime" />
		<result column="update_time" property="updateTime" />
		<result column="pw_update_time" property="pwUpdateTime" />
		<result column="user_name" property="userName" />
		<result column="user_email" property="userEmail" />
		<result column="grade" property="grade" />
		<result column="profile_image_url" property="profileImageUrl" />
	</resultMap>

	<!-- 모든 사용자 정보 조회 -->
	<select id="selectAllUsers" resultType="dto.UsersDTO">
		SELECT
		user_number AS
		userNumber,
		login_id AS loginId,
		nick_name AS nickName,
		password,
		create_time AS createTime,
		update_time AS updateTime,
		pw_update_time AS
		pwUpdateTime,
		user_name AS userName,
		user_email AS userEmail
		FROM
		users
	</select>

	<!-- 사용자 번호로 사용자 정보 조회 -->
	<select id="selectUserByUserNumber" parameterType="int"
		resultType="dto.UsersDTO">
		SELECT
		user_number AS userNumber,
		login_id AS loginId,
		nick_name AS nickName,
		password,
		create_time AS createTime,
		update_time
		AS updateTime,
		pw_update_time AS pwUpdateTime,
		user_name AS userName,
		user_email AS userEmail
		FROM
		users
		WHERE
		user_number = #{userNumber}
	</select>

	<!-- 사용자 댓글 삭제 admin -->
	<delete id="deleteCommentsByUserNumber" parameterType="int">
		DELETE
		FROM comments
		WHERE user_number = #{userNumber}
	</delete>

	<!-- 사용자 게시물 삭제 admin -->
	<delete id="deleteBoardsByUserNumber" parameterType="int">
		DELETE FROM
		boards
		WHERE user_number = #{userNumber}
	</delete>
	<!-- 사용자 삭제 admin -->
	<delete id="deleteUserByUserNumber" parameterType="int">
		DELETE FROM
		users
		WHERE user_number = #{userNumber}
	</delete>

	<!-- 특정 loginId와 password로 사용자 정보를 조회하기 위한 select 쿼리 정의 -->
	<select id="selectUserByLoginIdAndPassword" resultMap="users">
		SELECT *
		FROM users
		WHERE login_id = #{loginId} AND password =
		STANDARD_HASH(#{password},
		'SHA512')
	</select>

	<!-- admin을 제외한 유저 정보 조회 -->
	<select id="selectAllUsersExcludeAdmin"
		resultType="dto.UsersDTO">
		SELECT
		user_number AS userNumber,
		login_id AS loginId,
		nick_name AS
		nickName,
		user_name AS userName,
		user_email AS userEmail,
		create_time AS
		createTime
		FROM
		users
		WHERE
		grade != 'admin' OR grade IS NULL OR grade =
		''
		ORDER BY
		user_number ASC  <!-- 오름차순 정렬 -->
	</select>
	<!--유저 정보 상세조회 admin -->
	<select id="selectUserByNumber" parameterType="int"
		resultType="dto.UsersDTO">
		SELECT
		user_number AS userNumber,
		login_id AS loginId,
		nick_name AS nickName,
		password,
		create_time AS createTime,
		update_time
		AS updateTime,
		pw_update_time AS pwUpdateTime,
		user_name AS userName,
		user_email AS userEmail
		FROM
		users
		WHERE
		user_number = #{userNumber}
	</select>
	<!-- ........................................................................................................... -->
	<!-- 아이디 중복 확인 -->
	<select id="selectLoginIdCount" parameterType="string"
		resultType="int">
		SELECT COUNT(*)
		FROM users
		WHERE login_id = #{loginId}
	</select>

	<!-- 이메일 중복 확인 -->
	<select id="selectEmailCount" parameterType="string"
		resultType="int">
		SELECT COUNT(*)
		FROM users
		WHERE user_email = #{email}
	</select>

	<!-- 닉네임 중복 확인 -->
	<select id="selectNickNameCount" parameterType="string"
		resultType="int">
		SELECT COUNT(*)
		FROM users
		WHERE nick_name = #{nickName}
	</select>

	<!-- 회원 가입 -->
	<insert id="insertMember" parameterType="dto.UsersDTO">
		INSERT INTO users (
		user_number,
		login_id,
		nick_name,
		password,
		create_time,
		update_time,
		pw_update_time,
		user_name,
		user_email,
		grade
		)
		VALUES (
		SEQ_USER_NUMBER.NEXTVAL,
		#{loginId, jdbcType=VARCHAR},
		#{nickName, jdbcType=VARCHAR},
		#{password, jdbcType=VARCHAR},
		#{createTime, jdbcType=TIMESTAMP},
		NULL, <!-- update_time -->
		NULL, <!-- pw_update_time -->
		#{userName, jdbcType=VARCHAR},
		#{userEmail, jdbcType=VARCHAR},
		DEFAULT
		)
	</insert>

	<!-- ........................................................................................................... -->
	<!-- 로그인 -->
	<select id="findUserByLoginId" parameterType="string" resultMap="users">
		SELECT
		user_number,
		login_id,
		nick_name,
		password,
		user_name,
		user_email,
		grade,
		profile_image_url
		FROM users
		WHERE login_id = #{loginId}
	</select>

	<!-- ........................................................................................................... -->
	<!-- 내정보 수정 -->
	<!-- 사용자 번호로 사용자 정보 조회 -->
	<select id="findUserByUserNumber" parameterType="int"
		resultMap="users">
		SELECT
		user_number,
		login_id,
		nick_name,
		password,
		create_time,
		update_time,
		pw_update_time,
		user_name,
		user_email,
		grade,
		profile_image_url
		FROM users
		WHERE
		user_number = #{userNumber}
	</select>

	<!-- 정보수정 -->
	<update id="updateUser" parameterType="dto.UsersDTO">
		UPDATE users
		<set>
			<!-- 닉네임 변경 -->
			<if test="nickName != null and nickName != ''">
				nick_name = #{nickName},
			</if>
			<!-- 이메일 변경 -->
			<if test="userEmail != null and userEmail != ''">
				user_email = #{userEmail},
			</if>
			<!-- 비밀번호 변경 -->
			<if test="password != null and password != ''">
				password = #{password},
				pw_update_time = SYSDATE,
			</if>
			<!-- 항상 업데이트되는 update_time -->
			update_time = SYSDATE
		</set>
		WHERE user_number = #{userNumber}
	</update>
	<!-- ........................................................................................................... -->
	<!-- 새작업 12월 15일 -->
	<!-- 사용자 이름과 이메일을 기반으로 로그인 ID 찾기 -->
	<select id="findLoginIdByUserNameAndEmail" parameterType="map"
		resultType="string">
		SELECT login_id
		FROM users
		WHERE user_name = #{userName} AND
		user_email = #{userEmail}
	</select>
	<!-- ..................................................................................................................................... -->
	<!-- 새작업 12월 16일 -->
	<!-- pw찾기 -->
	<select id="findUserForPasswordReset" parameterType="map"
		resultType="dto.UsersDTO">
		SELECT user_number AS userNumber,
		login_id,
		user_name,
		user_email
		FROM users
		WHERE user_name = #{userName}
		AND login_id =
		#{loginId}
		AND user_email = #{userEmail}
	</select>

	<update id="updatePassword" parameterType="map">
		UPDATE users
		SET
		password = #{password}, pw_update_time = CURRENT_TIMESTAMP
		WHERE
		user_number = #{userNumber}
	</update>
	<!-- ........................................................................................................... -->
	
    <!-- 프로필 이미지 -->

    <!-- 사용자 번호를 기준으로 프로필 이미지 조회 -->
    <select id="getProfileImage" parameterType="int" resultType="string">
        SELECT profile_image_url
        FROM users
        WHERE user_number = #{userNumber}
    </select>

    <!-- 사용자 프로필 이미지 업데이트 -->
    <update id="updateProfileImage" parameterType="map">
        UPDATE users
        SET profile_image_url = #{fileName}
        WHERE user_number = #{userNumber}
    </update>
	<!-- ........................................................................................................... -->


</mapper>