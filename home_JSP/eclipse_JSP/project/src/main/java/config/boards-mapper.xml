<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper에 접근할 클래스 명 or 인터페이스 명 -->
<mapper namespace="mapper.BoardsMapper">

	<!-- 게시판 결과를 매핑하는 resultMap -->
	<resultMap type="dto.BoardsDTO" id="boards">
		<id column="post_number" property="postNumber" />
		<result column="user_number" property="userNumber" />
		<result column="title" property="title" />
		<result column="description" property="description" />
		<result column="tag" property="tag" />
		<result column="create_time" property="createTime" />
		<result column="update_time" property="updateTime" />
		<result column="nick_name" property="nickName" />
		<result column="blike" property="blike" />
		<result column="bcount" property="bcount" />
		<result column="ccount" property="ccount" />
	</resultMap>
	<resultMap type="dto.CommentsDTO" id="comments">
		<id column="comment_number" property="commentNumber" />
		<result column="post_number" property="postNumber" />
		<result column="user_number" property="userNumber" />
		<result column="c_description" property="cDescription" />
		<result column="cmt_create_time" property="cmtCreateTime" />
		<result column="cmt_update_time" property="cmtUpdateTime" />
		<result column="nick_name" property="nickName" />
	</resultMap>
	<resultMap type="dto.BoardFileDTO" id="file">
		<id column="file_number" property="fileNumber" />
		<result column="post_number" property="postNumber" />
		<result column="file_path" property="filePath" />
		<result column="file_name" property="fileName" />
	</resultMap>

	<!-- 전체 게시판 목록 조회 쿼리 -->
	<select id="selectAllBoards" resultMap="boards">
		SELECT * FROM board_view
		ORDER BY POST_NUMBER DESC
	</select>

	<!-- 전체 게시판 페이징 -->
	<select id="selectBoards" resultMap="boards">
		SELECT *
		FROM BOARD_VIEW_WITH_REPORT
		ORDER BY POST_NUMBER DESC
		OFFSET #{offset} ROWS FETCH NEXT #{limit}
		ROWS ONLY
	</select>

	<!-- 게시글 하나만 조회 -->
	<select id="selectBoardByPostNumber" resultMap="boards">
		select * from
		BOARD_VIEW
		WHERE POST_NUMBER = #{postNumber, jdbcType=INTEGER}
	</select>

	<!-- 게시글 삭제 -->
	<delete id="deleteBoardByPostNumber">
		DELETE FROM BOARDS WHERE POST_NUMBER = #{postNumber,
		jdbcType=INTEGER}
	</delete>

	<!-- 게시판 글쓰기 쿼리 -->
	<insert id="insertBoard" parameterType="dto.BoardsDTO">
		INSERT INTO
		boards(post_number, user_number, title, description, create_time, tag)
		VALUES(#{postNumber}, #{userNumber}, #{title}, #{description},
		SYSDATE, #{tag})
	</insert>

	<!-- 게시판 글 수정 쿼리 -->
	<update id="updateBoard" parameterType="dto.BoardsDTO">
		UPDATE boards SET title =
		#{title}, description = #{description}, update_time = sysdate, tag =
		#{tag}
		WHERE
		post_number = #{postNumber}
	</update>

	<!-- 게시판 검색 -->
	<select id="searchBoards" resultMap="boards">
		SELECT
		*
		FROM
		BOARD_VIEW_WITH_REPORT
		WHERE 1=1
		<if test="tag != null and tag.trim() != ''">
			AND TAG = #{tag} <!-- 카테고리 필터링 -->
		</if>
		<if
			test="type == 'title' and keyword != null and keyword.trim() != ''">
			AND TITLE LIKE '%' || #{keyword} || '%' <!-- 제목 검색 -->
		</if>
		<if
			test="type == 'writer' and keyword != null and keyword.trim() != ''">
			AND NICK_NAME LIKE '%' || #{keyword} || '%' <!-- 작성자 검색 -->
		</if>
		ORDER BY
		<choose>
			<when test="sort == 'bcount'">BCOUNT</when> <!-- 조회수 -->
			<when test="sort == 'blike'">BLIKE</when>   <!-- 좋아요 -->
			<when test="sort == 'createTime'">CREATE_TIME</when> <!-- 작성 시간 -->
			<otherwise>B.POST_NUMBER</otherwise>          <!-- 기본 정렬 -->
		</choose>
		<if test="order == 'asc'">ASC</if>
		<if test="order == 'desc'">DESC</if>
		OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY <!-- 페이징 처리 -->
	</select>

	<!-- 게시판 페이징 -->
	<select id="getBoardCount" resultType="int">
		SELECT COUNT(*)
		FROM BOARDS B
		LEFT JOIN USERS U
		ON B.USER_NUMBER =
		U.USER_NUMBER
		WHERE 1=1
		<if test="tag != null and tag.trim() != ''">
			AND B.TAG = #{tag}
		</if>
		<if
			test="keyword != null and keyword.trim() != '' and type != null">
			<choose>
				<when test="type == 'title'">
					AND B.TITLE LIKE '%' || #{keyword} || '%'
				</when>
				<when test="type == 'writer'">
					AND U.NICK_NAME LIKE '%' || #{keyword} || '%'
				</when>
			</choose>
		</if>
	</select>

	<!-- 게시글 카테고리 -->
	<select id="getBoardCountByTag" resultType="int">
		SELECT COUNT(*)
		FROM BOARD_VIEW b
		WHERE 1=1
		<if test="tag != null and tag.trim() != ''">
			AND B.TAG = #{tag}
		</if>
	</select>

	<!-- 조회수 -->
	<update id="updateBoardsCount">
		update boards set bcount = bcount + 1 where
		post_number = #{postNumber}
	</update>

	<!-- 댓글 작성 -->
	<insert id="insertComment" parameterType="dto.CommentsDTO">
		insert into
		comments(comment_number, post_number, user_number, c_description)
		values(SEQ_COMMENTS_COMMENT_NUMBER.nextval, #{postNumber},
		#{userNumber}, #{cDescription})
	</insert>

	<!-- 댓글 조회 -->
	<select id="getCommentList" resultMap="comments">
		select * from
		comments_view where post_number = #{postNumber} ORDER BY
		COMMENT_NUMBER
	</select>

	<!-- 댓글 삭제 -->
	<delete id="deleteComment">
		DELETE FROM COMMENTS WHERE COMMENT_NUMBER =
		#{commentNumber}
	</delete>
	
	<!-- 카테고리 댓글 카운팅  -->
	<select id="getBoardsByTagWithPaging" resultMap="boards">
		SELECT
		*
		FROM
		BOARD_VIEW 
		WHERE
		TAG = #{tag}
		ORDER BY
		CREATE_TIME DESC
		OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
	</select>

	<!-- 파일 업로드 -->
	<insert id="insertBoardFile" parameterType="dto.BoardFileDTO">
		insert into
		board_file(file_number,post_number,file_path,file_name)
		values(FILE_NUMBER_SEQ.nextval, #{postNumber}, #{filePath}, #{fileName})
	</insert>

	<!-- 첨부파일 목록 -->
	<select id="selectFileList" parameterType="int" resultMap="file">
		select * from board_file where post_number = #{postNumber}
	</select>

	<!-- 파일 다운로드 -->
	<select id="selectFilePath" parameterType="int" resultMap="file">
		select file_path, file_name from board_file where file_number =
		#{fileNumber}
	</select>

	<!-- 파일업로드 글 번호 확인 -->
	<select id="selectPostNumber" resultType="int">
		select
		POST_NUMBER_SEQ.nextval from dual
	</select>

	<!-- 기존 업로드 된 파일 삭제 -->
	<delete id="deleteBoardFile">
		delete from board_file where post_number =
		#{postNumber}
	</delete>

	<!-- 좋아요 입력 -->
	<insert id="insertBoardLike" parameterType="map">
		insert into board_likes(post_number, user_number)
		values(#{postNumber},#{userNumber})
	</insert>
	<!-- 좋아요 삭제 -->
	<delete id="deleteBoardLike" parameterType="map">
		delete from board_likes
		where post_number = #{postNumber} and user_number = #{userNumber}
	</delete>
	<!-- 좋아요 수 -->
	<select id="getBoardLike" parameterType="int" resultType="int">
		select count(*) from board_likes where post_number = #{postNumber}
	</select>
	<!-- 댓글 좋아요 입력 -->
	<insert id="insertCommentLike" parameterType="map">
		insert into comment_likes(comment_number, user_number)
		values(#{commentNumber},#{userNumber})
	</insert>
	<!-- 댓글 좋아요 삭제 -->
	<delete id="deleteCommentLike" parameterType="map">
		delete from comment_likes
		where comment_number = #{commentNumber} and user_number = #{userNumber}
	</delete>
	<!-- 댓글 좋아요 수 -->
	<select id="getCommentLike" parameterType="int" resultType="int">
		select count(*) from comment_likes where comment_number =
		#{commentNumber}
	</select>
	<!-- 댓글 작성자 번호 조회 -->
	<select id="getCommentUserNumber" resultType="int">
		SELECT user_Number FROM comments WHERE comment_Number = #{commentNumber}
	</select>
	<!-- 삭제할 파일 경로 조회 -->
	<select id="getFileByNumber" parameterType="int" resultMap="file">
		SELECT *
		FROM board_file
		WHERE file_number = #{fileNumber}
	</select>
</mapper>