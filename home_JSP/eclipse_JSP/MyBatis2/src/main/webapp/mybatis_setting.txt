-	마이바티스 셋팅 과정	-

1. 라이브러리를 프로젝트에 등록 -> 
	webapp / WEB-INF / lib에 jar파일 등록 넣기

2. 접송 정보 및 mapper.xml 파일 경로를 설정할 config.xml 생성
	xml형식은 해당 사이트에서 복사해옴
	순서 : 접속주소, 유저, 아이디, DB드라이버 클래스, mapper.xml 경로

3. mapper.xml 생성
	xml형식은 해당 사이트에서 복사해옴
	
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.mybatis.example.BlogMapper">
	
</mapper>
--
4. Mybatis 설정 정보를 기반으로 SqlSessionFactory 생성
	DBManager.java

5. mapper 클래스 or 인터페이스
	mapper 객체 생성
	
	
	-------------------------------------------------------------------------
	
	1. 라이브러리를 프로젝트에 등록
MyBatis를 사용하려면 해당 프레임워크의 라이브러리를 프로젝트에 추가해야 합니다. 일반적으로 JAR 파일 형태로 라이브러리를 추가합니다. 이 과정은 webapp/WEB-INF/lib 디렉토리에 MyBatis 관련 라이브러리 파일들을 복사해서 넣는 것을 의미합니다.

JAR 파일이 필요한 이유는 MyBatis가 제공하는 클래스 및 인터페이스들을 사용해야 하기 때문입니다.
Maven 프로젝트라면 pom.xml 파일에 MyBatis 의존성을 추가하여 쉽게 등록할 수 있습니다.
2. 접속 정보 및 mapper.xml 파일 경로를 설정할 config.xml 생성
config.xml 파일은 MyBatis의 설정 정보를 담고 있는 XML 파일입니다. 이 파일은 데이터베이스 접속 정보 및 MyBatis 매퍼 파일(mapper.xml)의 경로를 설정하는 데 사용됩니다.

이 파일은 데이터베이스에 어떻게 연결할 것인지에 대한 정보가 포함되어 있으며, 일반적으로 다음과 같은 내용이 포함됩니다:

접속 주소 (데이터베이스 URL)
유저명 (사용자 이름)
비밀번호 (데이터베이스 접근을 위한 비밀번호)
DB 드라이버 클래스 (데이터베이스와 연결하기 위한 드라이버)
mapper.xml 경로 (쿼리문을 담고 있는 매퍼 파일의 경로)
config.xml 파일을 작성하는 데 필요한 기본 XML 형식은 MyBatis 공식 문서나 예제를 참고하면 됩니다.

3. mapper.xml 생성
mapper.xml 파일은 MyBatis에서 SQL 쿼리를 관리하기 위한 파일입니다.

이 파일에는 SQL 쿼리가 포함되어 있으며, 특정한 쿼리를 실행하기 위해 쿼리와 자바 코드 간의 매핑을 설정합니다.
예를 들어, select, insert, update, delete와 같은 SQL 명령문들이 이 파일에 정의됩니다.
이 파일 역시 XML 형식이며, 필요에 따라 namespace와 같은 속성을 정의해서 관리할 수 있습니다.
4. MyBatis 설정 정보를 기반으로 SqlSessionFactory 생성
MyBatis는 설정 파일을 통해 데이터베이스 연결을 설정하고, 이를 바탕으로 SQL 세션을 관리하기 위해 **SqlSessionFactory**를 생성합니다.

SqlSessionFactory는 MyBatis에서 제공하는 클래스인데, 이를 통해 데이터베이스에 접속하고 SQL 쿼리를 실행할 수 있는 세션 객체를 만듭니다.
SqlSessionFactory는 설정 파일 (config.xml)을 읽어서 해당 설정을 반영하여 생성됩니다.
5. Mapper 클래스 또는 인터페이스
마지막으로 실제 SQL 쿼리를 호출하기 위해 Mapper 클래스 또는 인터페이스를 사용합니다.

MyBatis는 매퍼 인터페이스를 정의하여 XML에 작성된 SQL 쿼리를 매핑하는 기능을 제공합니다.
매퍼 인터페이스는 데이터베이스 쿼리와 자바 메서드를 매핑하여 사용자가 간단히 메서드를 호출하는 것만으로 쿼리를 실행할 수 있도록 도와줍니다.
SqlSession 객체를 이용해 매퍼 객체를 생성하고, 해당 매퍼 객체를 통해 SQL 쿼리를 실행합니다.
예시로 각 단계에 대해 설명해 볼게요.
라이브러리 추가:

프로젝트에 MyBatis 라이브러리를 추가해야 합니다. Maven이라면 pom.xml에 다음과 같이 추가합니다:
xml
코드 복사
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.7</version>
</dependency>
config.xml 설정:

config.xml 파일을 만들어 데이터베이스 정보를 입력합니다.
xml
코드 복사
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/mydb"/>
                <property name="username" value="root"/>
                <property name="password" value="password"/>
            </dataSource>
        </environment>
    </environments>
    <mappers>
        <mapper resource="mapper/BoardMemberMapper.xml"/>
    </mappers>
</configuration>
mapper.xml 생성:

mapper/BoardMemberMapper.xml 파일에서 SQL 쿼리를 작성합니다.
xml
코드 복사
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.BoardMemberMapper">
    <select id="selectAllMember" resultType="dto.BoardMemberDTO">
        SELECT * FROM board_member;
    </select>
</mapper>
SqlSessionFactory 생성:

자바 코드에서 SqlSessionFactory를 생성하여 데이터베이스 세션을 만듭니다.
java
코드 복사
InputStream inputStream = Resources.getResourceAsStream("config.xml");
SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
Mapper 사용:

Mapper 인터페이스를 사용해 쿼리를 호출합니다.
java
코드 복사
try (SqlSession session = sqlSessionFactory.openSession()) {
    BoardMemberMapper mapper = session.getMapper(BoardMemberMapper.class);
    List<BoardMemberDTO> members = mapper.selectAllMember();
    for (BoardMemberDTO member : members) {
        System.out.println(member);
    }
}
이렇게 각 단계는 데이터베이스와의 연결을 설정하고, 실제로 데이터에 접근하고 조작하기 위한 작업들을 수행하도록 순서대로 설정됩니다. MyBatis는 이런 과정을 통해 SQL 쿼리와 자바 객체를 간단히 매핑할 수 있도록 도와줍니다.