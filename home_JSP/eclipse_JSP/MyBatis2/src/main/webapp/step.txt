1. 데이터베이스 및 매퍼 인터페이스 설정

	데이터베이스 테이블 준비 : 먼저 major 테이블을 데이터베이스에 준비합니다. 이 테이블은 학과 정보를 저장합니다.
	MyBatis 매퍼 인터페이스 (MajorMapper) 정의 : MajorMapper는 SQL 쿼리를 Java 메서드와 매핑해주는 인터페이스입니다.
	selectAllMajor() 메서드를 통해 major 테이블의 모든 데이터를 조회하는 기능을 정의합니다.
	이 단계에서는 인터페이스에 대한 추상 메서드만 정의해두고, 실제 SQL 처리는 XML 매퍼 파일에 지정하게 됩니다.
	
	
	
2. 데이터베이스와 연결 설정

	MyBatis 설정 파일 작성 (mybatis-config.xml) : MyBatis가 사용할 환경과 데이터베이스 연결 정보(driver, url, username, password)를 설정합니다.
	데이터베이스 연결 풀을 설정하고, 트랜잭션을 관리하는 방식도 이 단계에서 지정합니다.
	매퍼 파일 등록을 통해 MajorMapper 같은 매퍼 인터페이스를 MyBatis와 연결합니다.
	
	
	
3. 서블릿 작성 (SelectAllMajorServlet)

	SelectAllMajorServlet 클래스 정의 : 서블릿은 클라이언트 요청을 처리하고 적절한 응답을 제공하는 역할을 합니다.
	/allMajor.do 경로로 요청이 들어오면 doGet() 메서드가 실행되어, MajorMapper를 통해 학과 정보를 조회하고 이를 JSP 페이지로 전달합니다.
	흐름 : 데이터베이스 세션을 얻고, MajorMapper를 사용해 selectAllMajor()를 호출합니다.
	조회된 학과 정보를 request 객체에 저장합니다.
	request 객체를 사용해 major_list.jsp로 전달합니다.
	
	
	
4. JSP 파일 작성 (major_list.jsp)

	major_list.jsp 페이지 : SelectAllMajorServlet에서 전달받은 학과 리스트 데이터를 사용자에게 표시합니다.
	JSTL (<c:forEach>)을 사용하여 학과 목록을 순회하며 테이블 형태로 화면에 출력합니다.
	페이지가 학과 번호와 학과 이름을 테이블 형태로 출력하도록 스타일과 HTML을 정의합니다.
	
	
	
5. 연결 흐름

	사용자가 브라우저에서 특정 URL (/allMajor.do)을 요청하면 서블릿이 실행됩니다.
	서블릿은 데이터베이스로부터 학과 데이터를 조회하고 이를 request 객체에 저장한 뒤 JSP 페이지로 포워딩합니다.
	JSP 페이지는 request에 담긴 데이터를 테이블로 출력하여 사용자에게 보여줍니다.
	전체 진행 순서 정리 : 데이터베이스 테이블 생성 및 매퍼 설정 (MajorMapper): 데이터베이스와 MyBatis 매퍼 인터페이스 준비.
	MyBatis 설정 파일 작성 : 데이터베이스 연결 설정 및 매퍼 파일 연결 설정.
	서블릿 작성 (SelectAllMajorServlet) : 클라이언트 요청 처리 및 데이터 조회 후 JSP로 전달.
	JSP 작성 (major_list.jsp) : 전달받은 데이터 테이블 형태로 출력.
	
	- 개발 팁 -
	
	단계별 테스트: 각 단계를 구현한 후에는 테스트를 통해 각 부분이 정상적으로 작동하는지 확인하는 것이 좋습니다.
	예를 들어, 먼저 데이터베이스 연결 및 MajorMapper가 제대로 동작하는지 테스트합니다.
	그 다음 서블릿을 테스트하여 데이터가 잘 조회되고 전달되는지 확인합니다.
	
	로그 활용: 서버 측에서 로그를 남겨 두면 데이터 흐름이나 에러 발생 시 문제를 파악하는 데 도움이 됩니다.
	코드 모듈화: 데이터베이스 접근 로직과 웹 페이지 로직을 각각 독립적으로 관리하면 유지보수 및 확장에 용이합니다.
	
이러한 순서대로 작업을 진행하면서 각 단계를 제대로 확인하면 학과 정보를 조회하고 화면에 출력하는 시스템을 완성할 수 있습니다.