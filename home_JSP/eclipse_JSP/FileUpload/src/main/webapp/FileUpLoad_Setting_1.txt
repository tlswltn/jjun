form 진행

예전 파일 업로드 같은경우 라이브러리를 받아서 해야 했지만 
요즘은라이브러리 받지 않고 할 수 있다

0. 다이나믹 웹 프로젝트 생성
	프로젝트 명 : FileUpload

-------------------------------------------------------------------------------------------------------------------------

1. 앞단구현 - file_upload_1.jsp 생성
	<h1>파일 업로드 테스트</h1>
	<form action="./fileUpLoad.do" method="post" enctype="multipart/form-data">
		<input type="file" name="file1"><br>
		<input type="file" name="file2"><br>
		<input type="file" name="file3"><br>
		<button>파일 업로드</button>
	</form>

	form의 method="get"은 url로 데이터가 통하는데 보낼 수 있는 데이터량이 한정되어 있어
	파일 업로드는 post로 사용

	enctype : 
		- HTML에서 form태그로 데이터를 보내는 방식을 어떤 타입(인코딩)으로 보내는지 정하는 태그
		그동안 사용하지 않은 이유는 기본값이 application/x-www-form-urlencoded이기 때문에
		application/x-www-form-urlencoded : 쿼리스트링 형태로 보내는 형태
							파라미터명은 ~다 로 보내는 방식

		파일을 보내는거니 쿼리스트링으로 보내면 안되고 바이너리데이터를 포함하는 방식으로
		- multipart/form-data으로 적용
		
-------------------------------------------------------------------------------------------------------------------------

2. ./fileUpLoad.do 해당하는 servlet 생성
	서블릿의 기초 사용법 주소 https://mainichibenkyo.tistory.com/187
	패키지 : servlet
	Servlet명 : FileUploadServlet
	
	@WebServlet("/fileUpload.do") file_upload1.jsp form태그와 연결

	이제 파일을 보내면 트래픽이 많이 발생하기 때문에
	트래픽량 크기를 지정 해줘야 한다
	원래 서버 설정파일에서 지정하는데 Servlet에서 지정 가능
	파일 사이즈 최대는 ~까지
	(리퀘스트[request] 사이즈) 요청하는 용량사이즈 최대값 설정
	
	Servlet의 @WebServlet("/fileUpload.do") 밑에 추가
	@MultipartConfig(maxFileSize = 1024 * 1024 * 5, maxRequestSize = 1024 * 1024 * 50)
	- 파일 사이즈 maxFileSize = 1024 * 1024 * 5 : 1MB
	- 전송 사이즈 maxRequestSize = 1024 * 1024 * 50 : 50MB
	
	멀티 파트 파일이기 때문에 일반적으로 진행하는 방식
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
//		// 업로드할 파일1 정보를 읽는 부분
//		Part part = request.getPart("file1");
//		
//		System.out.println(part.getName()); 
//		// jsp파일의 input태그의 첫번째 name 속성값
		
//		System.out.println(part.getSize()); 
//		// 파일 사이즈
		
//		System.out.println(part.getHeader("content-disposition"));
//		// 파일데이터 전송방법 + jsp파일의 input태그의 첫번째 name 속성값 + 파일명
		
//		System.out.println(part.getSubmittedFileName());
//		// 파일의 파일명
		
		// Part part = request.getPart("file1"); 이거로는 name 속성값(file1)을 지정해서 뽑기 때문에
		// 불편하니 파일 업로드가 여러개면 반복문을 통해서 파일업로드 값을 뽑는다
		
//		------------------------------------------------------------------------------------------------
		
		// 저장할 파일 폴더 사전에 미리 만들어 주기 (1)
		File root = new File("c:\\fileupload");
		
		// 해당 경로의 저장할 폴더가 있는지 체크, 없으면 해당 경로에 폴더 생성 (2)
		if(!root.exists()) {
			System.out.println("파일 업로드할 폴더 및 경로 생성 : "+root);
			root.mkdirs();
		}
		
		// 업로드할 파일 정보를 읽는 부분 (3)
		Iterator<Part> it = request.getParts().iterator();
		
		// 콜렉션으로 올린 파일의 모든 정보를 받아옴 (4)
		// 콜렉션의 문제 list로 바꿔서 반복문으로 쓰기 힘드니 
		// 처음부터 끝까지 탐색을 할때 콜렉션 계열을 처음부터 끝까지 탐색을 할땐 iterator()로 해서
		// 아래와 같이 반복문으로 hasNext(), next() 해서 처음부터 끝까지 탐색 가능
		while(it.hasNext()) {
			
			Part part = it.next();
			
			// 파일을 만약 하나만 올렸을경우 나머지 안올린 파일은 걸러주어야하는 작업을 해야한다. (5)
			// if (!part.getSubmittedFileName().isEmpty() : 파일명이 비어있지 않을때 실행
			if (part.getSubmittedFileName() != null && !part.getSubmittedFileName().isEmpty()) {
//			part.getSubmittedFileName() != null : 만약 파일이 아니라 다른 타입이 들어오면 
//													에러 발생하지 않고 파일만 들어 올 수있게 적용
//			!part.getSubmittedFileName().isEmpty() : 파일명이 없으면 들어오지 못하게
				System.out.println("input태그의 name 속성값 : "+part.getName());
				System.out.println("파일의 파일명 : "+part.getSubmittedFileName());
				System.out.println("파일의 사이즈 : "+part.getSize());
			
				// 파일쓰기 ( 파일을 저장할 경로)(6)
//				part.write(part.getSubmittedFileName()); // root랑 경로연결
				/*
				만약 (1)~(2)번 코드없이 위 코드대로 실행하면
				java.io.FileNotFoundException: c:\fileupload\파일명 (지정된 경로를 찾을 수 없습니다) 에러 발생
				fileupload의 폴더가 없으니 에러발생 그러니 회원이 새로 들어올때마다
				폴더를 새로 만들어야 하기 때문에 경로를 사전에 체크를 하고 없으면 만드는 코드를 작성 해야한다.  
				File file = new File("c:\\fileupload"); 위에 생성
				*/
				
				// 파일쓰기 ( 파일을 저장할 경로)(6)
				part.write(root.getAbsolutePath()+"\\"+part.getSubmittedFileName());
			}
		}
	}
	
	
	
-------------------------------------------------------------------------------------------------------------------------

